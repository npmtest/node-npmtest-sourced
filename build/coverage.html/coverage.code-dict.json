{"/home/travis/build/npmtest/node-npmtest-sourced/test.js":"/* istanbul instrument in package npmtest_sourced */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sourced/lib.npmtest_sourced.js":"/* istanbul instrument in package npmtest_sourced */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sourced = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sourced = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sourced/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sourced && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sourced */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sourced\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sourced.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sourced.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sourced.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sourced.__dirname + '/lib.npmtest_sourced.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sourced/node_modules/sourced/index.js":"'use strict';\n\nmodule.exports.Entity = require('./lib/entity');\nmodule.exports.Value = require('./lib/value');\n","/home/travis/build/npmtest/node-npmtest-sourced/node_modules/sourced/lib/entity.js":"/* jslint node: true */\n\nvar events = require('events');\nvar log = require('debug')('sourced');\nvar util = require('util');\nvar _ = require('lodash');\n\n/**\n * Extending native Error.\n *\n * @class {Function} EntityError\n * @param {String} msg The error message.\n * @param {Object} [constr=this] The constructor or instance.\n */\nfunction EntityError (msg, constr) {\n  Error.captureStackTrace(this, constr || this);\n  this.message = msg || 'Entity Error';\n}\n\nutil.inherits(EntityError, Error);\n\nEntityError.prototype.name = 'EntityError';\n\n/**\n * Creates an event-sourced Entity.\n *\n * @class {Function} Entity\n * @param {Object} [snapshot] A previously saved snapshot of an entity.\n * @param {Array} [events] An array of events to apply on instantiation.\n * @requires events\n * @requires debug\n * @requires util\n * @requires lodash\n * @license MIT\n */\nfunction Entity (/*snapshot, evnts*/) {\n\n  /**\n   * [Description]\n   *\n   * @member {Array} eventsToEmit\n   * @todo discuss the use of this so it can be documented better.\n   */\n  this.eventsToEmit = [];\n\n  /**\n   * [Description]\n   *\n   * @member {Array} newEvents\n   * @todo discuss the use of this so it can be documented better.\n   */\n  this.newEvents = [];\n\n  /**\n   * Boolean to prevent emit, enqueue and digest from running during replay.\n   *\n   * @member {Boolean} replaying\n   */\n  this.replaying = false;\n\n  /**\n   * Holds the version of the latest snapshot for the entity.\n   *\n   * @member {Number} snapshotVersion\n   */\n  this.snapshotVersion = 0;\n\n  /**\n   * Holds the event's timestamp in the entity.\n   *\n   * @member {Number} timestamp\n   */\n  this.timestamp = Date.now();\n\n  /**\n   * Holds the current version of the entity.\n   *\n   * @member {Number} version\n   */\n  this.version = 0;\n\n  events.EventEmitter.call(this);\n  var args = Array.prototype.slice.call(arguments);\n\n  /**\n   * If one argument is passed, asume it's a snapshot and merge it.\n   *\n   * @todo This should probably be changed. What if it's not a snapshot/object?\n   */\n  if (args[0]){\n    var snapshot = args[0];\n    this.merge(snapshot);\n  }\n\n  /**\n   * If two arguments are passed, asume the second is an array of events and\n   * replay them.\n   *\n   * @todo This should probably be changed. What if it's not an array?\n   */\n  if (args[1]){\n    var evnts = args[1];\n    this.replay(evnts);\n  }\n}\n\nutil.inherits(Entity, events.EventEmitter);\n\n/**\n * Wrapper around the EventEmitter.emit method that adds a condition so events\n * are not fired during replay.\n */\nEntity.prototype.emit = function emit () {\n  if ( ! this.replaying) {\n    events.EventEmitter.prototype.emit.apply(this, arguments);\n  }\n};\n\n/**\n * Add events to the queue of events to emit. If called during replay, this\n * method does nothing.\n */\nEntity.prototype.enqueue = function enqueue () {\n  if ( ! this.replaying) {\n    this.eventsToEmit.push(arguments);\n  }\n};\n\n/**\n * Digest a command with given data.This is called whenever you want to record\n * a command into the events for the entity. If called during replay, this\n * method does nothing.\n *\n * @param  {String} method  the name of the method/command you want to digest.\n * @param  {Object} data    the data that should be passed to the replay.\n */\nEntity.prototype.digest = function digest (method, data) {\n  if( ! this.replaying) {\n    this.timestamp = Date.now();\n    this.version = this.version + 1;\n    log(util.format('digesting event \\'%s\\' w/ data %j', method, data));\n    this.newEvents.push({\n      method: method,\n      data: data,\n      timestamp: this.timestamp,\n      version: this.version\n    });\n  }\n};\n\n/**\n * Merge a snapshot onto the entity.\n *\n * For every property passed in the snapshot, the value is deep-cloned and then\n * merged into the instance through mergeProperty. See mergeProperty for details.\n *\n * @param  {Object} snapshot  snapshot object.\n * @see Entity.prototype.mergeProperty\n */\nEntity.prototype.merge = function merge (snapshot) {\n  log(util.format('merging snapshot %j', snapshot));\n  for (var property in snapshot) {\n    if (snapshot.hasOwnProperty(property))\n      var val = _.cloneDeep(snapshot[property]);\n      this.mergeProperty(property, val);\n  }\n  return this;\n};\n\n/**\n * Merge a property onto the instance.\n *\n * Given a name and a value, mergeProperty checks first attempt to find the\n * property in the mergeProperties map using the constructor name as key. If it\n * is found and it is a function, the function is called. If it is NOT found\n * we check if the property is an object. If so, we merge. If not, we simply\n * assign the passed value to the instance.\n *\n * @param  {String} name   the name of the property being merged.\n * @param  {Object} value  the value of the property being merged.\n * @see mergeProperties\n * @see Entity.mergeProperty\n */\nEntity.prototype.mergeProperty = function mergeProperty (name, value) {\n  if (mergeProperties.size &&\n      mergeProperties.has(this.__proto__.constructor.name) &&\n      mergeProperties.get(this.__proto__.constructor.name).has(name) &&\n      typeof mergeProperties.get(this.__proto__.constructor.name).get(name) === 'function') {\n    return mergeProperties.get(this.__proto__.constructor.name).get(name).call(this, value);\n  }\n  else if (typeof value === 'object' && typeof this[name] === 'object') _.merge(this[name], value);\n  else this[name] = value;\n};\n\n/**\n * Replay an array of events onto the instance.\n *\n * The goal here is to allow application of events without emitting, enqueueing\n * nor digesting the replayed events. This is done by setting this.replaying to\n * true which emit, enqueue and digest check for.\n *\n * If the method in the event being replayed exists in the instance, we call\n * the mathod with the data in the event and set the version of the instance to\n * the version of the event. If the method is not found, we attempt to parse the\n * constructor to give a more descriptive error.\n *\n * @param  {Array} events  an array of events to be replayed.\n */\nEntity.prototype.replay = function replay (events) {\n  var self = this;\n\n  this.replaying = true;\n\n  log(util.format('replaying events %j', events));\n\n  events.forEach(function (event) {\n    if (self[event.method]) {\n      self[event.method](event.data);\n      self.version = event.version;\n    } else {\n      var classNameRegex = /function (.{1,})\\w?\\(/,\n          className = classNameRegex.exec(self.constructor.toString())[1],\n          errorMessage = util.format('method \\'%s\\' does not exist on model \\'%s\\'', event.method, className);\n      log(errorMessage);\n      throw new EntityError(errorMessage);\n    }\n  });\n\n  this.replaying = false;\n};\n\n/**\n * Create a snapshot of the current state of the entity instance.\n *\n * Here the instance's snapshotVersion property is set to the current version,\n * then the instance is deep-cloned and the clone is trimmed of the internal\n * sourced attributes using trimSnapshot and returned.\n *\n * @returns  {Object}\n */\nEntity.prototype.snapshot = function snapshot () {\n  this.snapshotVersion = this.version;\n  var snap = _.cloneDeep(this, true);\n  return this.trimSnapshot(snap);\n};\n\n/**\n * Remove the internal sourced properties from the passed snapshot.\n *\n * Snapshots are to contain only entity data properties. This trims all other\n * properties from the snapshot.\n *\n * @param  {Object} snapshot  the snapshot to be trimmed.\n * @see Entity.prototype.snapshot\n */\nEntity.prototype.trimSnapshot = function trimSnapshot (snapshot) {\n  delete snapshot.eventsToEmit;\n  delete snapshot.newEvents;\n  delete snapshot.replaying;\n  delete snapshot._events;\n  delete snapshot._maxListeners;\n  delete snapshot.domain;\n  return snapshot;\n};\n\n/**\n * Helper function to automatically create a method that calls digest on the\n * param provided. Use it to add methods that automatically call digest.\n *\n * @param  {Object} type  the entity class to which the method will be added.\n * @param  {Function} fn  the actual function to be added.\n * @example\n *\n *    Entity.digestMethod(Car, function clearSettings (param) {\n *\n *     const self = this;\n *\n *     this.settings.get(param.name).forEach((name, config) => {\n *\n *       config.sources.forEach((source) => {\n *\n *         source.remove();\n *\n *       });\n *\n *     });\n *\n *     return this.settings;\n *\n *    });\n *\n */\nEntity.digestMethod = function (type, fn) {\n  if ( ! type) throw new EntityError('type is required for digest method definitions');\n  if ( ! fn) throw new EntityError('a function is required for digest method definitions');\n  if ( ! fn.name) throw new EntityError('Anonmyous functions are not allowed in digest method definitions. Please provide a function name');\n  type.prototype[fn.name] = function () {\n    var digestArgs = Array.prototype.slice.call(arguments);\n    digestArgs.unshift(fn.name);\n    Entity.prototype.digest.apply(this, digestArgs);\n\n    var methodArgs = Array.prototype.slice.call(arguments);\n    return fn.apply(this, methodArgs);\n  };\n};\n\n/**\n * mergeProperties holds a map of entity types to properties.\n *\n * @see Entity.mergeProperty\n * @see Entity.prototype.mergeProperty\n * @static\n */\nvar mergeProperties = new Map();\n\n/**\n * Convenience function to store references to functions that should be run\n * when mergin a particular property.\n *\n * @param  {Object} type  the entity class to which the property->fn belongs to.\n * @param  {String} name  the name of the property that holds the fn.\n * @param  {Function} fn  the function to execute when merging the property.\n * @see mergeProperties\n * @example\n *  function Wheel (status) {\n *    this.status = status;\n *  }\n *\n *  Wheel.prototype.go = function () {\n *    this.status = 'going';\n *  }\n *\n *  function Car () {\n *    this.id = null;\n *    this.wheel = new Wheel(); // for instantiating our default wheel, when we first 'new' up a Car\n *\n *    Entity.apply(this, arguments);\n *  }\n *\n *  util.inherits(Car, Entity);\n *\n *  Entity.mergeProperty(Car, 'wheels', function (obj) {\n *    this.wheel = new Wheel(); // for instantiating our wheel from saved values in a database\n *  });\n */\nEntity.mergeProperty = function (type, name, fn) {\n  if ( ! mergeProperties.has(type.name)) mergeProperties.set(type.name, new Map());\n  mergeProperties.get(type.name).set(name, fn);\n};\n\nmodule.exports = Entity;\n","/home/travis/build/npmtest/node-npmtest-sourced/node_modules/sourced/lib/value.js":"module.exports = function (obj) {\n  return Object.freeze(obj);\n};\n"}